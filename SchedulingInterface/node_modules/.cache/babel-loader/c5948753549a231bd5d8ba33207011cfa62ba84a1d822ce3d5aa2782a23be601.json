{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\calar\\\\OneDrive\\\\Bureau\\\\Graph_Scheduling\\\\Graph_Scheduling\\\\SchedulingInterface\\\\src\\\\components\\\\GraphDisplay.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport { Box } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = ({\n  data,\n  zoom = 1,\n  viewMode = 'timeline',\n  showCriticalPath = false\n}) => {\n  _s();\n  const networkRef = useRef(null);\n  const network = useRef(null);\n  useEffect(() => {\n    if (!networkRef.current || !data) return;\n    const nodes = data.graph.nodes.map(node => ({\n      id: node.id.toString(),\n      label: `Tâche ${node.label}\\n\n                   Durée: ${node.duration}\\n\n                   Date au plus tôt: ${node.early_date}\\n\n                   Date au plus tard: ${node.late_date}\\n\n                   Marge totale: ${node.total_margin}\\n\n                   Marge libre: ${node.free_margin}`,\n      color: {\n        background: data.criticalPath.includes(node.id) ? '#ff7675' : '#74b9ff',\n        border: data.criticalPath.includes(node.id) ? '#d63031' : '#0984e3',\n        highlight: {\n          background: data.criticalPath.includes(node.id) ? '#fab1a0' : '#a0d8ef',\n          border: data.criticalPath.includes(node.id) ? '#ff7675' : '#74b9ff'\n        }\n      }\n    }));\n    const edges = data.graph.edges.map(edge => ({\n      from: edge.from.toString(),\n      to: edge.to.toString(),\n      arrows: 'to',\n      color: {\n        color: data.criticalPath.includes(edge.from) && data.criticalPath.includes(edge.to) ? '#d63031' : '#0984e3'\n      }\n    }));\n    const options = {\n      nodes: {\n        shape: 'box',\n        margin: {\n          top: 10,\n          right: 10,\n          bottom: 10,\n          left: 10\n        },\n        widthConstraint: {\n          minimum: 100,\n          maximum: 200\n        },\n        font: {\n          size: 14,\n          multi: true,\n          face: 'arial'\n        }\n      },\n      edges: {\n        width: 2,\n        smooth: {\n          enabled: true,\n          type: viewMode === 'timeline' ? 'curvedCW' : 'cubicBezier',\n          roundness: 0.5\n        }\n      },\n      layout: {\n        hierarchical: viewMode === 'timeline' ? {\n          direction: 'LR',\n          sortMethod: 'directed',\n          levelSeparation: 200,\n          nodeSpacing: 150\n        } : false\n      },\n      physics: viewMode === 'timeline' ? false : {\n        barnesHut: {\n          gravitationalConstant: -2000,\n          centralGravity: 0.3,\n          springLength: 200\n        }\n      }\n    };\n    network.current = new Network(networkRef.current, {\n      nodes,\n      edges\n    }, options);\n    network.current.once('stabilized', () => {\n      if (network.current) {\n        network.current.fit();\n        network.current.moveTo({\n          scale: zoom\n        });\n      }\n    });\n    return () => {\n      if (network.current) {\n        network.current.destroy();\n        network.current = null;\n      }\n    };\n  }, [data, zoom, viewMode, showCriticalPath]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: networkRef,\n    sx: {\n      width: '100%',\n      height: '100%',\n      bgcolor: 'background.paper',\n      borderRadius: 1,\n      overflow: 'hidden'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n};\n_s(GraphDisplay, \"ecx6paUgNOKFzS6OOGB0troGXbo=\");\n_c = GraphDisplay;\nexport default GraphDisplay;\nvar _c;\n$RefreshReg$(_c, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useRef","Network","Box","jsxDEV","_jsxDEV","GraphDisplay","data","zoom","viewMode","showCriticalPath","_s","networkRef","network","current","nodes","graph","map","node","id","toString","label","duration","early_date","late_date","total_margin","free_margin","color","background","criticalPath","includes","border","highlight","edges","edge","from","to","arrows","options","shape","margin","top","right","bottom","left","widthConstraint","minimum","maximum","font","size","multi","face","width","smooth","enabled","type","roundness","layout","hierarchical","direction","sortMethod","levelSeparation","nodeSpacing","physics","barnesHut","gravitationalConstant","centralGravity","springLength","once","fit","moveTo","scale","destroy","ref","sx","height","bgcolor","borderRadius","overflow","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/calar/OneDrive/Bureau/Graph_Scheduling/Graph_Scheduling/SchedulingInterface/src/components/GraphDisplay.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Network } from 'vis-network';\nimport { Box } from '@mui/material';\nimport { GraphData, Node, Edge } from '../types/graphTypes';\n\ninterface GraphDisplayProps {\n    data: GraphData;\n    zoom?: number;\n    viewMode?: 'timeline' | 'tree';\n    showCriticalPath?: boolean;\n}\n\nconst GraphDisplay: React.FC<GraphDisplayProps> = ({ \n    data, \n    zoom = 1, \n    viewMode = 'timeline',\n    showCriticalPath = false \n}) => {\n    const networkRef = useRef<HTMLDivElement>(null);\n    const network = useRef<Network | null>(null);\n\n    useEffect(() => {\n        if (!networkRef.current || !data) return;\n\n        const nodes = data.graph.nodes.map(node => ({\n            id: node.id.toString(),\n            label: `Tâche ${node.label}\\n\n                   Durée: ${node.duration}\\n\n                   Date au plus tôt: ${node.early_date}\\n\n                   Date au plus tard: ${node.late_date}\\n\n                   Marge totale: ${node.total_margin}\\n\n                   Marge libre: ${node.free_margin}`,\n            color: {\n                background: data.criticalPath.includes(node.id) ? '#ff7675' : '#74b9ff',\n                border: data.criticalPath.includes(node.id) ? '#d63031' : '#0984e3',\n                highlight: {\n                    background: data.criticalPath.includes(node.id) ? '#fab1a0' : '#a0d8ef',\n                    border: data.criticalPath.includes(node.id) ? '#ff7675' : '#74b9ff'\n                }\n            }\n        }));\n\n        const edges = data.graph.edges.map(edge => ({\n            from: edge.from.toString(),\n            to: edge.to.toString(),\n            arrows: 'to',\n            color: {\n                color: data.criticalPath.includes(edge.from) && \n                      data.criticalPath.includes(edge.to) ? '#d63031' : '#0984e3'\n            }\n        }));\n\n        const options = {\n            nodes: {\n                shape: 'box',\n                margin: {\n                    top: 10,\n                    right: 10,\n                    bottom: 10,\n                    left: 10\n                },\n                widthConstraint: {\n                    minimum: 100,\n                    maximum: 200\n                },\n                font: {\n                    size: 14,\n                    multi: true,\n                    face: 'arial'\n                }\n            },\n            edges: {\n                width: 2,\n                smooth: {\n                    enabled: true,\n                    type: viewMode === 'timeline' ? 'curvedCW' : 'cubicBezier',\n                    roundness: 0.5\n                }\n            },\n            layout: {\n                hierarchical: viewMode === 'timeline' ? {\n                    direction: 'LR',\n                    sortMethod: 'directed',\n                    levelSeparation: 200,\n                    nodeSpacing: 150\n                } : false\n            },\n            physics: viewMode === 'timeline' ? false : {\n                barnesHut: {\n                    gravitationalConstant: -2000,\n                    centralGravity: 0.3,\n                    springLength: 200\n                }\n            }\n        };\n\n        network.current = new Network(\n            networkRef.current,\n            { nodes, edges },\n            options\n        );\n\n        network.current.once('stabilized', () => {\n            if (network.current) {\n                network.current.fit();\n                network.current.moveTo({\n                    scale: zoom\n                });\n            }\n        });\n\n        return () => {\n            if (network.current) {\n                network.current.destroy();\n                network.current = null;\n            }\n        };\n    }, [data, zoom, viewMode, showCriticalPath]);\n\n    return (\n        <Box\n            ref={networkRef}\n            sx={{\n                width: '100%',\n                height: '100%',\n                bgcolor: 'background.paper',\n                borderRadius: 1,\n                overflow: 'hidden'\n            }}\n        />\n    );\n};\n\nexport default GraphDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}