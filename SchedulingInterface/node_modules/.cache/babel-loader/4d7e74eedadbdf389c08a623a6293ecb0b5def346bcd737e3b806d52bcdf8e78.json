{"ast":null,"code":"export const fetchGraphData = async fileNumber => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/graph/${fileNumber}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching graph data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["fetchGraphData","fileNumber","response","fetch","ok","Error","json","error","console"],"sources":["C:/Users/calar/OneDrive/Bureau/Graph_Scheduling/SchedulingInterface/src/api/graphApi.ts"],"sourcesContent":["interface GraphResponse {\n  graph: {\n    nodes: any[];\n    edges: any[];\n  };\n  ranks: any[];\n  margins: any[];\n  criticalPath: string[];\n}\n\nexport const fetchGraphData = async (fileNumber: number): Promise<GraphResponse> => {\n  try {\n    const response = await fetch(`http://localhost:5000/api/graph/${fileNumber}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching graph data:', error);\n    throw error;\n  }\n};\n"],"mappings":"AAUA,OAAO,MAAMA,cAAc,GAAG,MAAOC,UAAkB,IAA6B;EAClF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmCF,UAAU,EAAE,CAAC;IAC7E,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}